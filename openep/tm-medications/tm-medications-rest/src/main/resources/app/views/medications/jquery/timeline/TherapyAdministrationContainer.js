/*
 * Copyright (c) 2010-2014 Marand d.o.o. (www.marand.com)
 *
 * This file is part of Think!Med Clinical Medication Management.
 *
 * Think!Med Clinical Medication Management is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Think!Med Clinical Medication Management is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Think!Med Clinical Medication Management.  If not, see <http://www.gnu.org/licenses/>.
 */

Class.define('tm.views.medications.timeline.TherapyAdministrationContainer', 'app.views.common.containers.AppDataEntryContainer', {
  cls: 'therapy-administration-container',
  /** configs */
  view: null,
  dialog: null,
  therapy: null,
  administrations: null,
  administration: null,
  patientId: null,
  createNewTask: false,
  therapyDoseTypeEnum: null, //optional
  administrationType: null,  //optional
  editMode: null,
  therapyReviewedUntil: null,
  editableIfNotInFuture: null,
  administrationResultEnum: app.views.medications.TherapyEnums.administrationResultEnum.GIVEN,
  administrationNotAdministeredReasonEnum: null,
  selfAdministrationTypeEnum: null,
  reasonMap: null,
  stopFlow: null,
  lastPsoitiveTherapyRate: null,
  latestTherapyVersion: null,
  infusionActive: true,
  preselectedProductMedicationData: null,
  barcode: null,
  /** privates */
  medicationId: null,
  prescribedMedicationData: null,
  medicationProducts: null,
  requestSupplyAutoGenerated: null,
  witnessNeeded: null,
  medicationRuleUtils: null,
  _medicationDataForAllIngredients: null,
  _currentBagQuantity: null,
  _nextAdministrationDisplayValue: null,
  _administrationWarnings: null,
  /** privates: components */
  therapyDescriptionContainer: null,
  medicationField: null,
  warningContainer: null,
  administrationDateTimeCard: null,
  administrationDateField: null,
  administrationTimeField: null,
  rateContainer: null,
  _rateCommentContainer: null,
  ratePane: null,
  dosePane: null,
  doseLabel: null,
  _routesContainer: null, // present only if therapy dto contains more then one rotue (discretionary routes)
  _routesPane: null,
  doseContainer: null,
  _doseCommentContainer: null,
  volumeContainer: null,
  volumeField: null,
  _volumeCommentContainer: null,
  _bagContainer: null,
  _bagField: null,
  _oxygenRouteRowContainer: null,
  _oxygenRouteContainer: null,
  witnessContainer: null,
  witnessPane: null,
  administrationTimeContainer: null,
  requestSupplyContainer: null,
  commentField: null,
  confirmCancelRadioButtonGroup: null,
  confirmRadioButton: null,
  cancelRadioButton: null,
  infusionSetChangeButtonGroup: null,
  infusionSystemChangeButton: null,
  infusionSyringeChangeButton: null,
  validationForm: null,
  medicationData: null,
  setMedicationField: null,
  currentAdministration: null,

  administrationResultMenu: null,
  administrationResultMenuContainer: null,
  administrationResultButtonGroup: null,
  administrationResultButtonsContainer: null,
  administrationGivenContainer: null,
  administrationDeferContainer: null,
  administrationSelfAdminContainer: null,
  administrationNotGivenContainer: null,
  deferButtonGroup: null,
  selfAdminButtonGroup: null,
  notGivenButtonGroup: null,
  requestSupplyCheckBox: null,
  medicationContainer: null,
  infusionSetChangeContainer: null,
  resetButton: null,
  _medicationInfoButton: null,
  _titrationDataIcon: null,
  _medicationBarcodeContainer: null,
  ingredientRuleRequestTimeout: null,

  _plannedDoseTimeValidator: null,
  _administrationWarningsProvider: null,

  _renderConditionTask: null,

  /** constructor */
  Constructor: function (config)
  {
    this.callSuper(config);
    var self = this;
    var view = this.getView();
    var appFactory = view.getAppFactory();
    this.medicationProducts = !tm.jquery.Utils.isArray(this.medicationProducts) ? [] : this.medicationProducts;
    this.medicationId = this._getMedicationId(this.therapy);
    this.setLayout(tm.jquery.VFlexboxLayout.create("start", "stretch", 0));
    this.setPadding(10);
    this.careProfessionals = [];
    this.medicationRuleUtils = this.getConfigValue("medicationRuleUtils",
        new tm.views.medications.MedicationRuleUtils({view: view}));
    this.reasonMap = view.getTherapyChangeReasonTypeMap();
    this._buildComponents();
    this._buildGui();
    this._setAdministrationValues();
    this._setMedicationDataValues();

    this.on(tm.jquery.ComponentEvent.EVENT_TYPE_RENDER, function()
    {
      self._abortRenderConditionTask();
      self._renderConditionTask = appFactory.createConditionTask(
          function()
          {
            self._assertAdministrationWarnings();
            self._applyAdministrationAmountFieldFocus();
          },
          function()
          {
            return self.isRendered(true) && !tm.jquery.Utils.isEmpty(self.administrationDateField.getPlugin()) &&
                !tm.jquery.Utils.isEmpty(self.administrationTimeField.getPlugin());
          },
          50, 100
      );
    });
  },

  _buildComponents: function()
  {
    var self = this;
    var view = this.getView();
    var enums = app.views.medications.TherapyEnums;
    var utils = tm.views.medications.MedicationUtils;
    var isOxygenTherapy = this.getTherapy() && this.getTherapy().isOrderTypeOxygen();

    this.therapyDescriptionContainer = new tm.jquery.Container({
      layout: new tm.jquery.HFlexboxLayout(),
      flex: tm.jquery.flexbox.item.Flex.create(1, 1, 'auto'),
      html: this.therapy.formattedTherapyDisplay,
      cls: 'TherapyDescription'
    });

    this.administrationDateTimeCard = new tm.jquery.Container({layout: new tm.jquery.HFlexboxLayout({gap: 5})});
    this.administrationDateField = new tm.jquery.DatePicker({
      showType: "focus",
      width: 100,
      currentTimeProvider: function()
      {
        return CurrentTime.get();
      }
    });
    this.administrationDateField.setFlex(new tm.jquery.flexbox.item.Flex.create(1, 1, "auto"));
    this.administrationTimeField = new tm.jquery.TimePicker({
      showType: "focus",
      width: 50,
      nowButton: {
        text: view.getDictionary("asap")
      },
      currentTimeProvider: function()
      {
        return CurrentTime.get();
      }
    });
    this.administrationDateField.getField().onKey(
        new tm.jquery.event.KeyStroke({key: "d", altKey: false, ctrlKey: true, shiftKey: false}),
        function ()
        {
          self.administrationDateField.setDate(CurrentTime.get(), true);
          self.administrationTimeField.setTime(CurrentTime.get());
        });
    this.administrationTimeField.getField().onKey(
        new tm.jquery.event.KeyStroke({key: "d", altKey: false, ctrlKey: true, shiftKey: false}),
        function ()
        {
          self.administrationDateField.setDate(CurrentTime.get(), true);
          self.administrationTimeField.setTime(CurrentTime.get());
        });

    this.administrationDateField.on(tm.jquery.ComponentEvent.EVENT_TYPE_CHANGE, function ()
    {
      self._assertAdministrationWarnings();
    });

    this.administrationTimeField.on(tm.jquery.ComponentEvent.EVENT_TYPE_CHANGE, function()
    {
      self._assertAdministrationWarnings()
    });

    var routesLabelContainer = new tm.jquery.Container({
      layout: tm.jquery.HFlexboxLayout.create('flex-start', 'center', 0),
      flex: tm.jquery.flexbox.item.Flex.create(1, 1, "auto")
    });

    routesLabelContainer.add(tm.views.medications.MedicationUtils.crateLabel('TextLabel', view.getDictionary('route'), 0));

    var routePaneContainer = new tm.jquery.Container({
      layout: tm.jquery.HFlexboxLayout.create('flex-end', 'center', 0),
      flex: tm.jquery.flexbox.item.Flex.create(1, 1, "auto"),
      scrollable: "visible"
    });

    this._routesPane = new app.views.medications.ordering.RoutesPane({
      view: view,
      height: 30,
      maxRouteButtons: 4,
      maxRouteCharLength: 40,
      discretionaryRoutesDisabled: true
    });
    routePaneContainer.add(this._routesPane);

    this._routesContainer = new tm.jquery.Container({
      cls: "dose-container",
      layout: tm.jquery.HFlexboxLayout.create("flex-start", "center", 0),
      height: 48,
      scrollable: "visible",
      hidden: true
    });

    this._routesContainer.add(routesLabelContainer);
    this._routesContainer.add(routePaneContainer);

    this.doseContainer = new tm.jquery.Container({
      cls: "dose-container",
      layout: tm.jquery.VFlexboxLayout.create("flex-start", "flex-end", 0),
      hidden: true
    });
    this.doseLabel = new tm.jquery.Component({
      cls: 'TextLabel dose-label',
      html: view.getDictionary('dose'),
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
    });
    this.dosePane = new app.views.medications.ordering.DosePane({
      view: view,
      verticalLayout: true,
      flex: tm.jquery.flexbox.item.Flex.create(1, 1, "auto"),
      denominatorAlwaysVolume: self.therapy.isOrderTypeComplex(),
      volumeChangedEvent: function()
      {
        self._handleMedicationIngredientRule(app.views.medications.TherapyEnums.medicationRuleEnum.PARACETAMOL_MAX_DAILY_DOSE);

        if (!self.rateContainer.isHidden())
        {
          self.ratePane.calculateInfusionValues();
        }
      },
      numeratorChangeEvent: function()
      {
        if (!self.rateContainer.isHidden())
        {
          self.ratePane.refreshRate();
        }
      },
      numeratorFocusLostEvent: function(dosePane)
      {
        if (!dosePane.denominatorField.isHidden())
        {
          dosePane.requestFocusToDenominator();
        }
        else if (!self.rateContainer.isHidden())
        {
          self.ratePane.requestFocus();
        }
        else if (!self.volumeContainer.isHidden())
        {
          self.volumeField.focus();
        }
        else
        {
          self.administrationDateField.focus();
        }
      },
      denominatorFocusLostEvent: function()
      {
        if (!self.rateContainer.isHidden())
        {
          self.ratePane.requestFocus();
        }
        else if (!self.volumeContainer.isHidden())
        {
          self.volumeField.focus();
        }
        else
        {
          self.administrationDateField.focus();
        }
      }
    });

    var doseContentContainer = new tm.jquery.Container({
      layout: tm.jquery.HFlexboxLayout.create("flex-start", "flex-start", 0),
      alignSelf: "stretch"
    });
    this._doseCommentContainer = this._createDoctorsCommentContainer();
    doseContentContainer.add(this.doseLabel);
    doseContentContainer.add(this.dosePane);
    this.doseContainer.add(doseContentContainer);
    this.doseContainer.add(this._doseCommentContainer);

    this.rateContainer = new tm.jquery.Container({
      cls: 'rate-container',
      scrollable: "visible",
      hidden: true,
      layout: tm.jquery.VFlexboxLayout.create("flex-start", "flex-end", 0)
    });

    var rateLabel = new tm.jquery.Component({
      cls: 'TextLabel rate-label',
      html: view.getDictionary(isOxygenTherapy ? 'rate' : 'infusion.rate'),
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
    });

    this.ratePane = new app.views.medications.ordering.InfusionRatePane({
      view: view,
      cls: "infusion-rate-pane",
      verticalLayout: true,
      flex: tm.jquery.flexbox.item.Flex.create(1, 1, "auto"),
      allowZeroRate: self.administrationType === enums.administrationTypeEnum.ADJUST_INFUSION,
      autoRefreshRate: !isOxygenTherapy,
      getInfusionRateTypeBolusFunction: function()
      {
        return self.therapy.rateString && self.therapy.rateString == "BOLUS";
      },
      getInfusionIngredientsFunction: function()
      {
        if (self.therapy.isOrderTypeComplex())
        {
          var ingredientList = [];

          if (!self.doseContainer.isHidden() && self.therapy.getIngredientsList().length == 1)
          {
            var medication = self.therapy.getIngredientsList()[0].medication;
            var dose = self.dosePane.getDoseWithUnits();
            if (tm.jquery.Utils.isEmpty(dose.quantityDenominator) && utils.isUnitVolumeUnit(dose.quantityUnit))
            {
              ingredientList.push({
                medication: medication,
                quantity: dose.quantity,
                quantityUnit: dose.quantityUnit,
                quantityDenominator: null
              });
            }
            else
            {
              ingredientList.push({
                medication: medication,
                quantity: dose.quantity,
                quantityUnit: dose.quantityUnit,
                quantityDenominator: dose.quantityDenominator
              });
            }
          }
          else
          {
            self.therapy.getIngredientsList().forEach(function(ingredient)
            {
              ingredientList.push({
                medication: ingredient.medication,
                quantity: ingredient.quantity,
                quantityUnit: ingredient.quantityUnit,
                quantityDenominator: ingredient.quantityDenominator
              });
            });
          }
          return ingredientList;
        }
        return null;
      },
      getContinuousInfusionFunction: function ()
      {
        if (self.therapy.isOrderTypeComplex())
        {
          return self.therapy.continuousInfusion;
        }
        return false;
      },
      getVolumeSumFunction: function ()
      {
        if (!tm.jquery.Utils.isEmpty(self.volumeContainer) && !self.volumeContainer.isHidden()){
          return self.volumeField.getValue();
        }
        return self.therapy.volumeSum;
      },
      formulaVisibleFunction: function ()
      {
        return !isOxygenTherapy;
      }
    });

    var rateContentContainer = new tm.jquery.Container({
      cls:"rate-content-container",
      layout: tm.jquery.HFlexboxLayout.create("flex-start", self.therapy.isOrderTypeOxygen() ? "center" : "flex-start", 0),
      alignSelf: "stretch"
    });
    this._rateCommentContainer = this._createDoctorsCommentContainer();
    rateContentContainer.add(rateLabel);
    rateContentContainer.add(this.ratePane);
    this.rateContainer.add(rateContentContainer);
    this.rateContainer.add(this._rateCommentContainer);

    this._oxygenRouteRowContainer = new tm.jquery.Container({
      cls: 'oxygen-route-row-container',
      scrollable: "visible",
      layout: tm.jquery.HFlexboxLayout.create("flex-start", "center"),
      hidden: true
    });

    var oxygenRouteLabel = new tm.jquery.Component({
      cls: 'TextLabel route-label',
      html: view.getDictionary('device'),
      flex: tm.jquery.flexbox.item.Flex.create(1, 1, "auto")
    });

    this._oxygenRouteContainer = new app.views.medications.ordering.oxygen.OxygenRouteContainer({
      view: view,
      allowDeviceDeselect: false,
      cls: "oxygen-route-container",
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
    });

    this._oxygenRouteRowContainer.add(oxygenRouteLabel);
    this._oxygenRouteRowContainer.add(this._oxygenRouteContainer);

    this.volumeContainer = new tm.jquery.Container({
      cls: 'volume-container',
      layout: tm.jquery.VFlexboxLayout.create("center", "flex-end", 0),
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto"),
      hidden: true
    });

    var volumeLabel = new tm.jquery.Container({
      cls: 'TextLabel volume-label',
      html: view.getDictionary('volume.total'),
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
    });
    this.volumeField = tm.views.medications.MedicationUtils.createNumberField('n2', 68);
    this.volumeField.setFlex(tm.jquery.flexbox.item.Flex.create(1, 1, "auto"));
    this.volumeField.on(tm.jquery.ComponentEvent.EVENT_TYPE_CHANGE, function()
    {
      if (!self.rateContainer.isHidden())
      {
        self.ratePane.calculateInfusionValues();
      }
      if (self.therapyDoseTypeEnum === enums.therapyDoseTypeEnum.VOLUME_SUM)
      {
        self._handleMedicationIngredientRule(enums.medicationRuleEnum.PARACETAMOL_MAX_DAILY_DOSE);
      }
    });
    var mlLabel = new tm.jquery.Container({
      cls: 'TextData ml-label',
      html: 'mL',
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
    });
    var volumeContentContainer = new tm.jquery.Container({
      cls: "volume-sum-container",
      layout: tm.jquery.HFlexboxLayout.create("flex-start", "flex-start", 0),
      alignSelf: "stretch"
    });
    this._volumeCommentContainer = this._createDoctorsCommentContainer();
    volumeContentContainer.add(volumeLabel);
    volumeContentContainer.add(this.volumeField);
    volumeContentContainer.add(mlLabel);
    this.volumeContainer.add(volumeContentContainer);
    this.volumeContainer.add(this._volumeCommentContainer);

    if (view.isInfusionBagEnabled())
    {
      this._bagContainer = new tm.jquery.Container({
        cls: 'bag-container',
        layout: tm.jquery.HFlexboxLayout.create("flex-start", "center", 0),
        flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto"),
        height: 48,
        hidden: true
      });

      var bagLabel = new tm.jquery.Container({
        cls: 'TextLabel volume-label',
        html: view.getDictionary('bag.syringe.volume'),
        flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
      });

      this._bagField = tm.views.medications.MedicationUtils.createNumberField('n2', 68);
      this._bagField.setFlex(tm.jquery.flexbox.item.Flex.create(1, 1, "auto"));

      var bagMlLabel = new tm.jquery.Container({
        cls: 'TextData ml-label',
        html: 'mL',
        flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
      });

      this._bagContainer.add(bagLabel);
      this._bagContainer.add(this._bagField);
      this._bagContainer.add(bagMlLabel);
    }

    this.witnessContainer = new tm.jquery.Container({
      cls: 'witness-container',
      layout: tm.jquery.HFlexboxLayout.create("flex-start", "center", 0),
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto"),
      height: 48,
      hidden: true
    });
    var witnessLabel = new tm.jquery.Container({
      cls: 'TextLabel witness-label',
      html: view.getDictionary('witness'),
      flex: tm.jquery.flexbox.item.Flex.create(1, 1, "auto")
    });
    this.witnessPane = new tm.views.medications.timeline.WitnessPane({
      cls: 'witness-pane',
      view: view,
      careProfessionals: this.careProfessionals
    });
    this.witnessContainer.add(witnessLabel);
    this.witnessContainer.add(this.witnessPane);
    this.administrationTimeContainer = new tm.jquery.Container({
      cls: 'administration-time-container',
      layout: tm.jquery.HFlexboxLayout.create("flex-start", "center", 0),
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto"),
      height: 48
    });
    var administrationTimeLabel = new tm.jquery.Container({
      cls: 'TextLabel administration-time-label',
      html: view.getDictionary('administration.time'),
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
    });
    this.administrationTimeContainer.add(administrationTimeLabel);
    this.administrationTimeContainer.add(this.administrationDateField);
    this.administrationTimeContainer.add(this.administrationTimeField);

    this.requestSupplyContainer = new tm.jquery.Container({
      cls: 'request-supply-container',
      layout: tm.jquery.HFlexboxLayout.create("flex-start", "center"),
      height: 48,
      hidden: true
    });

    this.requestSupplyCheckBox = new tm.jquery.CheckBox({enabled: true, nowrap: true});
    this.requestSupplyCheckBox.on(tm.jquery.ComponentEvent.EVENT_TYPE_CHANGE, function ()
    {
      self.requestSupplyAutoGenerated = false;
    });
    var requestSupplyLabel = new tm.jquery.Container({
      cls: 'TextLabel request-supply-label',
      html: view.getDictionary("nurse.resupply.request.button"),
      flex: tm.jquery.flexbox.item.Flex.create(1, 1, "auto")
    });

    this.requestSupplyContainer.add(requestSupplyLabel);
    this.requestSupplyContainer.add(this.requestSupplyCheckBox);
    this.requestSupplyContainer.add(this._createYesLabel());

    var infusionSetChangeLabel = new tm.jquery.Container({
      cls: 'TextLabel infusion-set-change-label',
      html: view.getDictionary("infusion.set.change.short"),
      flex: tm.jquery.flexbox.item.Flex.create(1, 1, "auto")
    });

    this.commentField = new tm.jquery.TextArea({
      width: 438,
      cls: 'comment-field',
      rows: 3,
      placeholder: view.getDictionary('commentary') + "..."
    });

    this.confirmRadioButton = new tm.jquery.RadioButton({
      labelText: view.getDictionary('successful'),
      labelCls: 'TextLabel',
      data: true,
      labelAlign: "right",
      checked: true
    });
    this.cancelRadioButton = new tm.jquery.RadioButton({labelText: view.getDictionary('unsuccessful'), data: false, labelAlign: "right"});
    if (!this.createNewTask)
    {
      this.confirmCancelRadioButtonGroup = new tm.jquery.RadioButtonGroup();
      this.confirmCancelRadioButtonGroup.add(this.confirmRadioButton);
      this.confirmCancelRadioButtonGroup.add(this.cancelRadioButton);
    }

    if (this.administrationType == enums.administrationTypeEnum.INFUSION_SET_CHANGE)
    {
      this.infusionSystemChangeButton = new tm.jquery.Button({
        cls: "btn-bubble",
        data: enums.infusionSetChangeEnum.INFUSION_SYSTEM_CHANGE,
        text: view.getDictionary("InfusionSetChangeEnum." + enums.infusionSetChangeEnum.INFUSION_SYSTEM_CHANGE),
        pressed: true,
        handler: function()
        {
          if (self._bagContainer && self.infusionSystemChangeButton.isPressed())
          {
            self._bagContainer.hide();
          }
        }
      });
      this.infusionSyringeChangeButton = new tm.jquery.Button({
        cls: "btn-bubble",
        data: enums.infusionSetChangeEnum.INFUSION_SYRINGE_CHANGE,
        text: view.getDictionary("InfusionSetChangeEnum." + enums.infusionSetChangeEnum.INFUSION_SYRINGE_CHANGE),
        handler: function()
        {
          if (self._bagContainer && self.infusionSyringeChangeButton.isPressed())
          {
            self._bagContainer.show();
          }
        }
      });

      this.infusionSetChangeContainer = new tm.jquery.Container({
        cls: "infusion-set-change-container with-top-border",
        layout: tm.jquery.HFlexboxLayout.create('flex-start', 'center'),
        height: 48
      });
      this.infusionSetChangeButtonGroup = new tm.jquery.ButtonGroup({
        cls: "btn-group-bubble",
        buttons: [this.infusionSystemChangeButton, this.infusionSyringeChangeButton],
        orientation: 'horizontal',
        type: 'radio'
      });
      this.infusionSetChangeButtonGroup.on(tm.jquery.ComponentEvent.EVENT_TYPE_CHANGE, function(component)
      {
        if (self._bagContainer)
        {
          if (component.getSelection()[0].data === enums.infusionSetChangeEnum.INFUSION_SYSTEM_CHANGE)
          {
            self._bagContainer.isRendered() ? self._bagContainer.hide() : self._bagContainer.setHidden(true);
          }
          else
          {
            self._bagContainer.isRendered() ? self._bagContainer.show() : self._bagContainer.setHidden(false);
          }
        }
      });
      this.infusionSetChangeContainer.add(this.infusionSetChangeButtonGroup);
    }

    this.validationForm = new tm.jquery.Form({
      onValidationSuccess: function ()
      {
        self.makePreConfirmChecks();
      },
      onValidationError: function ()
      {
        self.resultCallback(new app.views.common.AppResultData({success: false}));
      },
      requiredFieldValidatorErrorMessage: view.getDictionary("field.value.is.required")
    });

    this.administrationGivenContainer = new tm.jquery.Container({
      cls: 'administration-given-container'
    });
    this.administrationDeferContainer = new tm.jquery.Container({
      cls: 'administration-defer-container with-top-border'
    });

    var deferLabel = tm.views.medications.MedicationUtils.crateLabel('TextLabel', view.getDictionary('reason.defer'));
    var patientNotAvailableButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: view.getDictionary('patient.unavailable'),
      testAttribute: 'deferred-patient-unavailable',
      handler: function()
      {
        if (self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.validationForm.reset();
        self.administrationNotAdministeredReasonEnum = self._getReasonFromMap(self.reasonMap.ADMINISTRATION_DEFER, 17);
      }
    });
    var medicationNotAvailableButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: view.getDictionary('medicine.unavailable'),
      testAttribute: 'deferred-medicine-unavailable',
      handler: function()
      {
        if(!self.requestSupplyCheckBox.isChecked())
        {
          self.requestSupplyCheckBox.setChecked(true, false);
          self.requestSupplyAutoGenerated = true;
        }
        self.validationForm.reset();
        self.administrationNotAdministeredReasonEnum = self._getReasonFromMap(self.reasonMap.ADMINISTRATION_DEFER, 16);
      }
    });
    var clinicalReasonsButton = new tm.jquery.Button({
      cls: "btn-bubble",
      id: "clinical-reason",
      text: view.getDictionary('clinical.reason'),
      testAttribute: 'deferred-clinical-reason',
      handler: function()
      {
        if(self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.validationForm.reset();
        self.administrationNotAdministeredReasonEnum = self._getReasonFromMap(self.reasonMap.ADMINISTRATION_DEFER, 18);
      }
    });
    this.deferButtonGroup = new tm.jquery.ButtonGroup({
      cls: "btn-group-bubble",
      buttons:[patientNotAvailableButton, medicationNotAvailableButton, clinicalReasonsButton],
      orientation: 'horizontal',
      type: 'radio'
    });
    this.administrationDeferContainer.add(deferLabel);
    this.administrationDeferContainer.add(this.deferButtonGroup);

    this.administrationSelfAdminContainer = new tm.jquery.Container({
      cls: 'administration-self-admin-container with-top-border',
      height: 73
    });

    var selfAdminLabel = tm.views.medications.MedicationUtils.crateLabel('TextLabel', view.getDictionary('level.self.admin'));
    var adminAndChartByNurseButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: '1 - administered & charted by nurse',
      handler: function()
      {
        if(self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.selfAdministrationTypeEnum = enums.selfAdministrationTypeEnum.LEVEL_1;
      }
    });
    var selfAdminChartedByNurseButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: view.getDictionary('charted.by.nurse'),
      testAttribute: 'self-admin-charted-by-nurse',
      handler: function()
      {
        if(self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.selfAdministrationTypeEnum = enums.selfAdministrationTypeEnum.LEVEL_2;
      }
    });
    var selfAdminAutoChartedButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: view.getDictionary('automatically.charted'),
      testAttribute: 'self-admin-auto-charted',
      handler: function()
      {
        if(self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.selfAdministrationTypeEnum = enums.selfAdministrationTypeEnum.LEVEL_3;
      }
    });

    this.selfAdminButtonGroup = new tm.jquery.ButtonGroup({
      cls: "btn-group-bubble",
      buttons: [selfAdminChartedByNurseButton, selfAdminAutoChartedButton], //adminAndChartByNurseButton,
      orientation: 'horizontal',
      type: 'radio'
    });
    this.administrationSelfAdminContainer.add(selfAdminLabel);
    this.administrationSelfAdminContainer.add(this.selfAdminButtonGroup);

    this.administrationNotGivenContainer = new tm.jquery.Container({
      cls: 'administration-not-given-container with-top-border'
    });
    var notGivenLabel = tm.views.medications.MedicationUtils.crateLabel('TextLabel', view.getDictionary('reason.not.given'));

    var patientRefusedButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: view.getDictionary('patient.refused'),
      testAttribute: 'not-given-patient-refused',
      handler: function()
      {
        if(self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.validationForm.reset();
        self.administrationNotAdministeredReasonEnum = self._getReasonFromMap(self.reasonMap.ADMINISTRATION_NOT_GIVEN, 11);
      }
    });
    var nilByMouthButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: view.getDictionary('nil.by.mouth'),
      testAttribute: 'not-given-nil-by-mouth',
      handler: function()
      {
        if(self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.validationForm.reset();
        self.administrationNotAdministeredReasonEnum = self._getReasonFromMap(self.reasonMap.ADMINISTRATION_NOT_GIVEN, 12);
      }
    });
    var medicineUnavailableButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: view.getDictionary('medicine.unavailable'),
      testAttribute: 'not-given-medicine-unavailable',
      handler: function()
      {
        if(!self.requestSupplyCheckBox.isChecked())
        {
          self.requestSupplyCheckBox.setChecked(true, false);
          self.requestSupplyAutoGenerated = true;
        }
        self.validationForm.reset();
        self.administrationNotAdministeredReasonEnum = self._getReasonFromMap(self.reasonMap.ADMINISTRATION_NOT_GIVEN, 13);
      }
    });
    var patientUnavailableButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: view.getDictionary('patient.unavailable'),
      testAttribute: 'not-given-patient-unavailable',
      handler: function()
      {
        if (self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.validationForm.reset();
        self.administrationNotAdministeredReasonEnum = self._getReasonFromMap(self.reasonMap.ADMINISTRATION_NOT_GIVEN, 14);
      }
    });
    var clinicalReasonsNotGivenButton = new tm.jquery.Button({
      cls: "btn-bubble",
      id: "clinical-reason",
      text: view.getDictionary('clinical.reason'),
      testAttribute: 'not-given-clinical-reason',
      handler: function()
      {
        if(self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.validationForm.reset();
        self.administrationNotAdministeredReasonEnum = self._getReasonFromMap(self.reasonMap.ADMINISTRATION_NOT_GIVEN, 15);
      }
    });
    var medicineFreeIntervalButton = new tm.jquery.Button({
      cls: "btn-bubble",
      text: view.getDictionary('medicine.free.interval'),
      testAttribute: 'not-given-medicine-free-interval',
      handler: function()
      {
        if(self.requestSupplyAutoGenerated == true)
        {
          self.requestSupplyCheckBox.setChecked(false, false);
        }
        self.validationForm.reset();
        self.administrationNotAdministeredReasonEnum = self._getReasonFromMap(self.reasonMap.ADMINISTRATION_NOT_GIVEN, 19);
      }
    });

    this.notGivenButtonGroup = new tm.jquery.ButtonGroup({
      cls: "btn-group-bubble",
      buttons: [patientRefusedButton, nilByMouthButton, medicineUnavailableButton, patientUnavailableButton, clinicalReasonsNotGivenButton, medicineFreeIntervalButton], //, medicineFreeIntervalButton
      orientation: 'horizontal',
      type: 'radio'
    });

    this.administrationNotGivenContainer.add(notGivenLabel);
    this.administrationNotGivenContainer.add(this.notGivenButtonGroup);

    this.administrationResultMenu = new tm.jquery.SimpleCardContainer({
      cls: "borderless",
      animation: "fade",
      prerendering: true,
      optimized: true,
      activeIndex: 0
    });
    this.administrationResultMenu.add(this.administrationGivenContainer);
    this.administrationResultMenu.add(this.administrationDeferContainer);
    this.administrationResultMenu.add(this.administrationSelfAdminContainer);
    this.administrationResultMenu.add(this.administrationNotGivenContainer);

    var givenButton = new tm.jquery.Button({
      pressed: true,
      cls: "btn-ios",
      text: view.getDictionary('given'),
      flex: tm.jquery.flexbox.item.Flex.create(1, 0, "auto"),
      testAttribute: 'administration-mark-given',
      handler: function()
      {
        self._routesPane.show();
        self.validationForm.reset();
        self.requestSupplyCheckBox.setChecked(false, false);
        self.administrationResultEnum = enums.administrationResultEnum.GIVEN;
        if (!tm.jquery.Utils.isEmpty(self.medicationContainer))
        {
          self.medicationContainer.show();
        }
        self._presentMedicationData(self.getMedicationData(), self.setMedicationField);
        self.administrationResultMenu.setActiveItem(self.administrationGivenContainer);
        self.administrationNotAdministeredReasonEnum = null;
      }
    });
    var deferButton = new tm.jquery.Button({
      cls: "btn-ios",
      text: view.getDictionary('defer'),
      flex: tm.jquery.flexbox.item.Flex.create(1, 0, "auto"),
      testAttribute: 'administration-mark-deferred',
      handler: function()
      {
        self._routesPane.hide();
        self.validationForm.reset();
        self.requestSupplyCheckBox.setChecked(false, false);
        self.deferButtonGroup.setSelection([]);
        self.administrationResultEnum = enums.administrationResultEnum.DEFER;
        self._hideAllDoseRateFields();
        self._hideOxygenRouteRowContainer();
        self._hideWitnessContainer();
        self.administrationResultMenu.setActiveItem(self.administrationDeferContainer);
        self.administrationNotAdministeredReasonEnum = null;
      }
    });
    var selfAdminButton = new tm.jquery.Button({
      cls: "btn-ios",
      text: view.getDictionary('self.admin'),
      flex: tm.jquery.flexbox.item.Flex.create(1, 0, "auto"),
      testAttribute: 'administration-mark-self-admission',
      handler: function()
      {
        self._routesPane.hide();
        self.validationForm.reset();
        self.requestSupplyCheckBox.setChecked(false, false);
        self.selfAdminButtonGroup.setSelection([]);
        self.administrationResultEnum = enums.administrationResultEnum.SELF_ADMINISTERED;
        if (!tm.jquery.Utils.isEmpty(self.medicationContainer))
        {
          self.medicationContainer.show();
        }
        self._presentMedicationData(self.getMedicationData(), self.setMedicationField);
        self.administrationResultMenu.setActiveItem(self.administrationSelfAdminContainer);
        self.administrationNotAdministeredReasonEnum = null;
      }
    });
    var notGivenButton = new tm.jquery.Button({
      cls: "btn-ios",
      text: view.getDictionary('not.given'),
      flex: tm.jquery.flexbox.item.Flex.create(1, 0, "auto"),
      testAttribute: 'administration-mark-not-given',
      handler: function()
      {
        self._routesPane.hide();
        self.validationForm.reset();
        self.requestSupplyCheckBox.setChecked(false, false);
        self.notGivenButtonGroup.setSelection([]);
        self.administrationResultEnum = enums.administrationResultEnum.NOT_GIVEN;
        self._hideAllDoseRateFields();
        self._hideOxygenRouteRowContainer();
        self._hideWitnessContainer();
        self.administrationResultMenu.setActiveItem(self.administrationNotGivenContainer);
        self.administrationNotAdministeredReasonEnum = null;
      }
    });

    var isTitratedTherapy = this.getTherapy() && this.getTherapy().isTitrationDoseType();
    var addSelfAdminBtn = view.isAutoAdministrationChartingEnabled() && !isOxygenTherapy && !isTitratedTherapy;

    this.administrationResultButtonGroup = new tm.jquery.ButtonGroup({
      cls: 'btn-group-ios',
      flex: tm.jquery.flexbox.item.Flex.create(1, 0, "auto"),
      buttons: addSelfAdminBtn ? [givenButton, deferButton, selfAdminButton, notGivenButton] :
          [givenButton, deferButton, notGivenButton],
      orientation: 'horizontal',
      type: 'radio'
    });

    this.administrationResultButtonsContainer = new tm.jquery.Container({
      cls: 'admin-result-btns-container',
      layout: tm.jquery.HFlexboxLayout.create('center', 'center'),
      height: 48
    });
    this.administrationResultButtonsContainer.add(this.administrationResultButtonGroup);

    this.administrationResultMenuContainer = new tm.jquery.Container({
      cls: 'admin-status-container',
      layout: tm.jquery.VFlexboxLayout.create("start", "start"),
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto"),
      scrollable: 'visible'
    });
    this.administrationResultMenuContainer.add(this.administrationResultMenu);
    this.resetButton = new tm.jquery.Button({
      cls: "btn-reset",
      type: "link",
      text: view.getDictionary('revert'),
      handler: function()
      {
        self._setAdministrationTime();
        self._presentMedicationData(self.getMedicationData(), self.setMedicationField);
      }
    });

    this._plannedDoseTimeValidator = new app.views.medications.timeline.administration.PlannedDoseTimeValidator({
      administrations: this.administrations
    });
    this._administrationWarningsProvider = new app.views.medications.timeline.administration.AdministrationWarningsProvider({
      view: view,
      plannedDoseTimeValidator: this._plannedDoseTimeValidator,
      administration: this.administration,
      administrations: this.administrations,
      administrationType: this.administrationType,
      therapy: this.getTherapy(),
      infusionActive: this.infusionActive,
      therapyReviewedUntil: this.therapyReviewedUntil
    });
  },

  /**
   * @returns {tm.jquery.Container}
   * @private
   */
  _createDoctorsCommentContainer: function()
  {
    return new tm.jquery.Container({
      layout: tm.jquery.HFlexboxLayout.create("center", "center"),
      cls: "doctors-comment TextData",
      hidden: true
    })
  },

  _createYesLabel: function()
  {
    return new tm.jquery.Container({
      cls: 'YesTextLabel',
      html: this.getView().getDictionary("yes"),
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
    });
  },

  _setAdministrationTime: function()
  {
    var now = CurrentTime.get();
    var administration = this.administration;
    var administrationTime;
    if (!tm.jquery.Utils.isEmpty(this.administration) && !tm.jquery.Utils.isEmpty(this.administration.plannedTime))
    {
      var plannedTime = new Date(administration.plannedTime);
      administrationTime = plannedTime < now ? plannedTime : now;
    }
    else
    {
      administrationTime = now;
    }
    this.administrationDateField.setDate(administrationTime, true);
    this.administrationTimeField.setTime(administrationTime);
  },

  _getReasonFromMap: function(map, code)
  {
    var reason = null;
    map.forEach(function (r){
      if(r.code == code) reason = r
    });
    return reason;
  },

  _getSelectedRoute: function()
  {
    return this._routesPane.getSelectedRoutes()[0];
  },

  _setAdministrationValues: function()
  {
    var administrationTime;
    var enums = app.views.medications.TherapyEnums;
    var view = this.getView();

    var now = CurrentTime.get();
    var therapy = this.therapy;
    var administration = this.administration;

    if (administration)
    {
      if (this.editMode)
      {
        var reasonCode;
        this.administrationResultEnum = administration.administrationResult;
        if (administration.administrationStatus == "FAILED")
        {
          this.confirmCancelRadioButtonGroup.setActiveRadioButton(this.cancelRadioButton);
        }
        administrationTime = new Date(administration.administrationTime);
        this.commentField.setValue(tm.jquery.Utils.escapeHtml(administration.comment));
        if (administration.administrationResult == enums.administrationResultEnum.GIVEN)
        {
          this.administrationResultButtonGroup.setSelection([this.administrationResultButtonGroup.getButtons()[0]], false);
          this.administrationResultMenu.setActiveItem(this.administrationGivenContainer);
        }
        if (administration.administrationResult == enums.administrationResultEnum.DEFER)
        {
          reasonCode = administration.notAdministeredReason.code;
          this.administrationResultButtonGroup.setSelection([this.administrationResultButtonGroup.getButtons()[1]], false);
          this.administrationResultMenu.setActiveItem(this.administrationDeferContainer);
          if (reasonCode == 17)
          {
            this.deferButtonGroup.setSelection([this.deferButtonGroup.getButtons()[0]], false);
          }
          else if (reasonCode == 16)
          {
            this.deferButtonGroup.setSelection([this.deferButtonGroup.getButtons()[1]], false);
          }
          else if (reasonCode == 18)
          {
            this.deferButtonGroup.setSelection([this.deferButtonGroup.getButtons()[2]], false);
          }
          this.administrationNotAdministeredReasonEnum = administration.notAdministeredReason;
        }
        if (administration.administrationResult == enums.administrationResultEnum.SELF_ADMINISTERED)
        {
          this.administrationResultButtonGroup.setSelection([this.administrationResultButtonGroup.getButtons()[2]], false);
          this.administrationResultMenu.setActiveItem(this.administrationSelfAdminContainer);
          if (administration.selfAdministrationType == enums.selfAdministrationTypeEnum.LEVEL_2)
          {
            this.selfAdminButtonGroup.setSelection([this.selfAdminButtonGroup.getButtons()[0]], false);
          }
          else if (administration.selfAdministrationType == enums.selfAdministrationTypeEnum.LEVEL_3)
          {
            this.selfAdminButtonGroup.setSelection([this.selfAdminButtonGroup.getButtons()[1]], false);
          }
        }
        if (administration.administrationResult == enums.administrationResultEnum.NOT_GIVEN)
        {
          reasonCode = administration.notAdministeredReason.code;
          this.administrationResultButtonGroup.setSelection([this.administrationResultButtonGroup.getButtons()[3]], false);
          this.administrationResultMenu.setActiveItem(this.administrationNotGivenContainer);
          if (reasonCode == 11)
          {
            this.notGivenButtonGroup.setSelection([this.notGivenButtonGroup.getButtons()[0]], false);
          }
          else if (reasonCode == 12)
          {
            this.notGivenButtonGroup.setSelection([this.notGivenButtonGroup.getButtons()[1]], false);
          }
          else if (reasonCode == 13)
          {
            this.notGivenButtonGroup.setSelection([this.notGivenButtonGroup.getButtons()[2]], false);
          }
          else if (reasonCode == 14)
          {
            this.notGivenButtonGroup.setSelection([this.notGivenButtonGroup.getButtons()[3]], false);
          }
          else if (reasonCode == 15)
          {
            this.notGivenButtonGroup.setSelection([this.notGivenButtonGroup.getButtons()[4]], false);
          }
          else if (reasonCode == 19)
          {
            this.notGivenButtonGroup.setSelection([this.notGivenButtonGroup.getButtons()[5]], false);
          }
          this.administrationNotAdministeredReasonEnum = administration.notAdministeredReason;
        }
      }
      else
      {
        this.administrationResultEnum = enums.administrationResultEnum.GIVEN;
        var plannedTime = new Date(administration.plannedTime);
        administrationTime = plannedTime < now ? plannedTime : now;
      }
      if (administration.plannedTime != null)
      {
        this.therapyDescriptionContainer.setHtml(this.therapyDescriptionContainer.getHtml() +
            tm.views.medications.MedicationTimingUtils.getFormattedAdministrationPlannedTime(view, administration));
      }
      if (!tm.jquery.Utils.isEmpty(therapy.bnfMaximumPercentage))
      {
        this.therapyDescriptionContainer.setHtml(this.therapyDescriptionContainer.getHtml() +
            tm.views.medications.MedicationUtils.createBnfPercentageInfoHtml(view, therapy.bnfMaximumPercentage));
      }
    }
    else
    {
      administrationTime = now;
    }

    this.administrationDateField.setDate(administrationTime, true);
    this.administrationTimeField.setTime(administrationTime, true);

    var selfAdministeringActionEnum = !tm.jquery.Utils.isEmpty(therapy) ? therapy.selfAdministeringActionEnum : null;
    if (!tm.jquery.Utils.isEmpty(selfAdministeringActionEnum) && !tm.jquery.Utils.isEmpty(administration) && !this.editMode)
    {
      this.administrationResultEnum = enums.administrationResultEnum.SELF_ADMINISTERED;
      this.administrationResultButtonGroup.setSelection([this.administrationResultButtonGroup.getButtons()[2]], false);
      this.administrationResultMenu.setActiveItem(this.administrationSelfAdminContainer);

      if (selfAdministeringActionEnum == enums.selfAdministeringActionEnum.CHARTED_BY_NURSE)
      {
        this.selfAdminButtonGroup.setSelection([this.selfAdminButtonGroup.getButtons()[0]], false);
        this.selfAdministrationTypeEnum = enums.selfAdministrationTypeEnum.LEVEL_2;
      }
      else if (selfAdministeringActionEnum == enums.selfAdministeringActionEnum.AUTOMATICALLY_CHARTED)
      {
        this.selfAdminButtonGroup.setSelection([this.selfAdminButtonGroup.getButtons()[1]], false);
        this.selfAdministrationTypeEnum = enums.selfAdministrationTypeEnum.LEVEL_3;
      }
    }
  },

  _setMedicationDataValues: function()
  {
    if (this.getTherapy().isOrderTypeComplex() &&
        tm.jquery.Utils.isArray(this.getMedicationData()) && this.getMedicationData().length > 0)
    {
      this._findFirstMedicationAndValidateData(
          this.getMedicationData(),
          this.getTherapy().getMainMedication().getId(),
          true);
      this._applyTitrationDataIconVisibility();
    }
    else if (this.getTherapy().getMainMedication() && !this.getTherapy().getMainMedication().isMedicationUniversal())
    {
      this.prescribedMedicationData = this.getMedicationData();
      var medicationData =
          this.preselectedProductMedicationData ? this.preselectedProductMedicationData : this.getMedicationData();
      this._applyMedicationInfoButtonTooltip(medicationData);

      this._validateAndPresentData(medicationData, !tm.jquery.Utils.isEmpty(this.preselectedProductMedicationData));
      this._applyTitrationDataIconVisibility();
    }
    else // presume uncoded medications (universal forms)
    {
      this._validateAndPresentData(this.getMedicationData(), false);
    }
  },

  _buildGui: function()
  {
    var self = this;
    var view = this.getView();
    var enums = app.views.medications.TherapyEnums;

    var therapyDescriptionAndInfoContainer = new tm.jquery.Container({
      cls: "therapy-description-and-info borderless",
      layout: tm.jquery.HFlexboxLayout.create("center", "flex-start")
    });

    therapyDescriptionAndInfoContainer.add(this.therapyDescriptionContainer);
    therapyDescriptionAndInfoContainer.add(this._buildAdditionalInformationRow());
    this.add(therapyDescriptionAndInfoContainer);

    this.add(new tm.jquery.Spacer({type: 'vertical', size: 4}));

    if(!tm.jquery.Utils.isEmpty(this.administration) && !tm.jquery.Utils.isEmpty(this.administration.taskId) &&
        this.administration.administrationType !== enums.administrationTypeEnum.STOP)
    {
      this.add(this.administrationResultButtonsContainer);
    }

    this.add(this.administrationResultMenu);
    if (!this.createNewTask && this.therapy.getMedicationId() &&
        (view.getTherapyAuthority().isMedicationIdentifierScanningAllowed() || this.therapy.isOrderTypeSimple()))
    {
      var medicationContainerLayout = tm.jquery.HFlexboxLayout.create(
          view.getTherapyAuthority().isMedicationIdentifierScanningAllowed() && this.therapy.isOrderTypeSimple()
              ? "flex-start" : "center",
          "center", 5);
      this.medicationContainer = new tm.jquery.Container({
        cls: 'medication-container',
        layout: medicationContainerLayout,
        height:
            view.getTherapyAuthority().isMedicationIdentifierScanningAllowed() && this.therapy.isOrderTypeSimple() ? 72 : 48,
        overflow: 'visible'
      });
      var medicationLabel = new tm.jquery.Component({
        cls: 'TextLabel medication-label',
        html: view.getDictionary('medication'),
        flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
      });

      var medicationFieldsContainer = new tm.jquery.Container({
        cls: 'medication-fields-container',
        layout: tm.jquery.VFlexboxLayout.create("flex-start", "flex-end", 0),
        flex: tm.jquery.flexbox.item.Flex.create(1, 1, "auto")
      });

      if (view.getTherapyAuthority().isMedicationIdentifierScanningAllowed())
      {
        this._medicationBarcodeContainer = new app.views.medications.timeline.administration.MedicationBarcodeContainer({
          view: view,
          therapy: this.getTherapy(),
          barcode: this.barcode,
          medicationProducts: this.medicationProducts
        });
        this._medicationBarcodeContainer.on(
            app.views.medications.timeline.administration.MedicationBarcodeContainer.EVENT_TYPE_MEDICATION_BARCODE_SCANNED,
            function(component, componentEvent)
            {
              var eventData = componentEvent.getEventData();
              self._medicationIdFromBarcodeChanged(eventData.medicationIdFound, eventData.medicationId);
            });
        medicationFieldsContainer.add(this._medicationBarcodeContainer);
      }
      if (this.therapy.isOrderTypeSimple())
      {
        this.medicationField =
            tm.views.medications.MedicationUtils.createMedicationTypeaheadField(
                view,
                null,
                true,
                "medication-field");

        this.medicationField.setSource(this.medicationProducts);
        this.medicationField.on(tm.jquery.ComponentEvent.EVENT_TYPE_CHANGE, function (component)
        {
          if (self._medicationBarcodeContainer)
          {
            self._medicationBarcodeContainer.clear();
          }
          var selection = component.getSelection();
          if (selection && self.medicationId != selection.getId())
          {
            self._loadMedicationData(selection.getId());
          }
        });
        medicationFieldsContainer.add(this.medicationField);
      }
      this.medicationContainer.add(medicationLabel);
      this.medicationContainer.add(medicationFieldsContainer);

      this.add(this.medicationContainer);
    }

    if (this.infusionSetChangeButtonGroup)
    {
      this.administrationResultButtonsContainer.hide();
      this.administrationResultMenu.hide();
      if ((tm.jquery.Utils.isEmpty(this.administration)) ||
          (this.administration && tm.jquery.Utils.isEmpty(this.administration.taskId) &&
          tm.jquery.Utils.isEmpty(this.administration.infusionBag)))
      {
        this.add(this.infusionSetChangeContainer);
      }
    }

    this.add(this._routesContainer);
    this.add(this.doseContainer);
    this.add(this.rateContainer);
    this.add(this._oxygenRouteRowContainer);
    this.add(this.volumeContainer);
    if (view.isInfusionBagEnabled())
    {
      this.add(this._bagContainer);
    }
    this.add(this.administrationTimeContainer);
    this.add(this.witnessContainer);
    this.add(this.requestSupplyContainer);

    if (view.getMedicationsSupplyPresent() === true && view.getTherapyAuthority().isCreateResupplyRequestAllowed())
    {
      this.requestSupplyContainer.show();
    }
    var commentLabelContainer = new tm.jquery.Container({
      layout: tm.jquery.HFlexboxLayout.create('flex-start', 'center', 5),
      flex: tm.jquery.flexbox.item.Flex.create(1, 0, "auto")
    });
    var commentContainer = new tm.jquery.Container({
      cls: 'comment-container',
      layout: tm.jquery.VFlexboxLayout.create("flex-start", "flex-start")
    });
    commentLabelContainer.add(tm.views.medications.MedicationUtils.crateLabel('TextLabel', view.getDictionary('commentary')));
    commentContainer.add(commentLabelContainer);
    commentContainer.add(this.commentField);
    this.add(commentContainer);

    this.warningContainer = new tm.views.medications.timeline.AdministrationWarningContainer({
      view: view,
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, "auto")
    });

    this.add(this.warningContainer);
  },

  _buildAdditionalInformationRow: function()
  {
    var self = this;

    var additionalInformationRow = new tm.jquery.Container({
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, 'auto'),
      layout: tm.jquery.VFlexboxLayout.create("flex-start", "flex-start")
    });

    this._medicationInfoButton = new tm.jquery.Container({
      cls: 'medication-info-button',
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, 'auto'),
      width: 25,
      height: 30,
      hidden: true
    });
    additionalInformationRow.add(this._medicationInfoButton);

    this._titrationDataIcon = new tm.jquery.Container({
      cls: "show-titration-data-icon",
      flex: tm.jquery.flexbox.item.Flex.create(0, 0, 'auto'),
      width: 24,
      height: 24,
      hidden: true
    });
    this._titrationDataIcon.on(tm.jquery.ComponentEvent.EVENT_TYPE_CLICK, function(){
      self._showTitrationData();
    });

    additionalInformationRow.add(this._titrationDataIcon);

    return additionalInformationRow;
  },

  _showTitrationData: function()
  {
    var dialogBuilder = new app.views.medications.timeline.titration.TitrationDialogBuilder({
      view: this.getView()
    });

    var titrationTherapy = this.getLatestTherapyVersion() ? this.getLatestTherapyVersion() : this.getTherapy();
    dialogBuilder.showDataViewingDialog(titrationTherapy, this.prescribedMedicationData.getTitration(), this.administration);
  },

  _getMedicationId: function (therapy)
  {
    if (therapy.isOrderTypeComplex())
    {
      return (therapy.getIngredientsList() && therapy.getIngredientsList().length > 0) ?
          therapy.getIngredientsList()[0].medication.id :
          null;
    }
    else
    {
      return therapy.medication.id
    }
  },

  _createMedicationDetailsTooltip: function(medicationData)
  {
    var view = this.getView();
    var appFactory = view.getAppFactory();

    var medicationDetailsContainer = new app.views.medications.common.MedicationDetailsContainer({
      view: view,
      medicationData: medicationData
    });

    return appFactory.createDefaultPopoverTooltip(
        view.getDictionary("medication"),
        null,
        medicationDetailsContainer
    );
  },

  /**
   * @param {Boolean} medicationWithIdFound
   * @param {Number} medicationId
   * @private
   */
  _medicationIdFromBarcodeChanged: function(medicationWithIdFound, medicationId) {
    if (medicationWithIdFound)
    {
      this._loadMedicationData(medicationId, true);
    }
    else if (this.medicationField)
    {
      this.medicationField.setSelection(null, null, true);
    }
  },

  _buildTherapyDose: function()
  {
    var therapyDose = {};
    var rateValues = null;
    var doseValues = null;

    if (this.stopFlow)
    {
      var therapy = this.getTherapy();

      if (therapy.isOrderTypeOxygen())
      {
        therapyDose.numerator = 0;
        therapyDose.numeratorUnit = therapy.getFlowRateUnit() ? therapy.getFlowRateUnit()
            : this.ratePane.getFlowRateUnit();
        therapyDose.therapyDoseTypeEnum = this.therapyDoseTypeEnum !== null ? this.therapyDoseTypeEnum : "RATE";
      }
      else
      {
        var isCodedMedication = this.medicationId != null; //uncoded medication are from universal form
        var doseElement = this._getDoseElementFromTherapy();
        therapyDose.therapyDoseTypeEnum = this.therapyDoseTypeEnum != null ? this.therapyDoseTypeEnum : "RATE";
        therapyDose.numerator = 0;
        therapyDose.numeratorUnit = doseElement.rateUnit ? doseElement.rateUnit : this.ratePane.getInfusionRate().rateUnit;
        therapyDose.denominator = isCodedMedication && !tm.jquery.Utils.isEmpty(doseElement.rateFormula) ? 0 : null;
        therapyDose.denominatorUnit = isCodedMedication ? doseElement.rateFormulaUnit : null;
      }
    }
    else if (!this.rateContainer.isHidden() && !this.doseContainer.isHidden()) //TherapyDoseTypeEnum RATE_QUANTITY
    {
      rateValues = this.ratePane.getInfusionRate();
      doseValues = this.dosePane.getDoseWithUnits();

      therapyDose.therapyDoseTypeEnum = this.therapyDoseTypeEnum != null ? this.therapyDoseTypeEnum : "RATE_QUANTITY";
      therapyDose.numerator = rateValues.rate;
      therapyDose.numeratorUnit = rateValues.rateUnit;
      therapyDose.denominator = !tm.jquery.Utils.isEmpty(rateValues.rateFormula) ? rateValues.rateFormula : null;
      therapyDose.denominatorUnit = !tm.jquery.Utils.isEmpty(rateValues.rateFormulaUnit) ? rateValues.rateFormulaUnit : null;

      if (doseValues.quantity == null)
      {
        therapyDose.secondaryNumerator = doseValues.quantityDenominator;
      }
      else
      {
        therapyDose.secondaryNumerator = doseValues.quantity;
        therapyDose.secondaryDenominator = doseValues.quantityDenominator;
      }
      therapyDose.secondaryNumeratorUnit = doseValues.quantityUnit;
      therapyDose.secondaryDenominatorUnit = doseValues.denominatorUnit;
    }
    else if (!this.volumeContainer.isHidden() && !this.rateContainer.isHidden())  //TherapyDoseTypeEnum RATE_VOLUME_SUM
    {
      rateValues = this.ratePane.getInfusionRate();
      therapyDose.therapyDoseTypeEnum = this.therapyDoseTypeEnum != null ? this.therapyDoseTypeEnum : "RATE_VOLUME_SUM";
      therapyDose.numerator = rateValues.rate;
      therapyDose.numeratorUnit = rateValues.rateUnit;
      therapyDose.denominator = !tm.jquery.Utils.isEmpty(rateValues.rateFormula) ? rateValues.rateFormula : null;
      therapyDose.denominatorUnit = !tm.jquery.Utils.isEmpty(rateValues.rateFormulaUnit) ? rateValues.rateFormulaUnit : null;

      therapyDose.secondaryNumerator = this.volumeField.getValue();
      therapyDose.secondaryNumeratorUnit = 'ml';
      therapyDose.secondaryDenominator = null;
      therapyDose.secondaryDenominatorUnit = null;
    }
    else if (!this.doseContainer.isHidden()) // TherapyDoseTypeEnum QUANTITY
    {
      doseValues = this.dosePane.getDoseWithUnits();
      if (doseValues.quantity == null)
      {
        therapyDose.numerator = doseValues.quantityDenominator;
      }
      else
      {
        therapyDose.numerator = doseValues.quantity;
        therapyDose.denominator = doseValues.quantityDenominator;
      }
      therapyDose.therapyDoseTypeEnum = this.therapyDoseTypeEnum != null ? this.therapyDoseTypeEnum : "QUANTITY";
      therapyDose.numeratorUnit = doseValues.quantityUnit;
      therapyDose.denominatorUnit = doseValues.denominatorUnit;
    }
    else if (!this.rateContainer.isHidden()) //TherapyDoseTypeEnum RATE
    {
      rateValues = this.ratePane.getInfusionRate();
      therapyDose.therapyDoseTypeEnum = this.therapyDoseTypeEnum != null ? this.therapyDoseTypeEnum : "RATE";
      therapyDose.numerator = rateValues.rate;
      therapyDose.numeratorUnit = rateValues.rateUnit;
      therapyDose.denominator = !tm.jquery.Utils.isEmpty(rateValues.rateFormula) ? rateValues.rateFormula : null;
      therapyDose.denominatorUnit = !tm.jquery.Utils.isEmpty(rateValues.rateFormulaUnit) ? rateValues.rateFormulaUnit : null;
    }
    else if (!this.volumeContainer.isHidden()) //TherapyDoseTypeEnum VOLUME_SUM
    {
      therapyDose.therapyDoseTypeEnum = this.therapyDoseTypeEnum != null ? this.therapyDoseTypeEnum : "VOLUME_SUM";
      therapyDose.numerator = this.volumeField.getValue();
      therapyDose.numeratorUnit = 'ml';
      therapyDose.denominator = null;
      therapyDose.denominatorUnit = null;
    }

    return therapyDose;
  },

  _confirmTherapyAdministration: function()
  {
    var self = this;
    var view = this.getView();
    var enums = app.views.medications.TherapyEnums;

    if (this.administration == null)
    {
      this.administration = {};
      this.administration.additionalAdministration = true;
      this.administration.administrationType = this.administrationType;
    }
    this.administration.administeredDose = {};
    this.administration.plannedDose = {};
    this.administration.administrationResult = this.administrationResultEnum;
    this.administration.witness = this.witnessPane.getAuthenticatedWitness();

    if (this.administrationResultEnum == enums.administrationResultEnum.DEFER ||
        this.administrationResultEnum == enums.administrationResultEnum.NOT_GIVEN)
    {
      this.administration.notAdministeredReason = this.administrationNotAdministeredReasonEnum;
    }
    if (this.administrationResultEnum == enums.administrationResultEnum.SELF_ADMINISTERED)
    {
      this.administration.selfAdministrationType = this.selfAdministrationTypeEnum;
    }

    this.administration.comment = this.commentField.getValue() ? this.commentField.getValue() : null;

    var selectedTimestamp = this._getSelectedTimestamp();
    var therapyDose = this._buildTherapyDose();

    if (this.medicationField)
    {
      var selectedMedication = this.medicationField.getSelection();
      var therapyMedication = this._getMedicationId(this.therapy);
      if (selectedMedication.id != therapyMedication)
      {
        this.administration.substituteMedication = selectedMedication;
      }
    }

    if (this.infusionSetChangeButtonGroup)
    {
      this.administration.infusionSetChangeEnum = this.infusionSetChangeButtonGroup.getSelection()[0].data;
    }

    if (self.therapy.getRoutes().length > 1)
    {
      this.administration.route = this._getSelectedRoute();
    }

    if (this._bagContainer && !this._bagContainer.isHidden())
    {
      if (this._bagField && this._bagField.getValue())
      {
        this.administration.infusionBag = {quantity: this._bagField.getValue(), unit: "mL"};
      }
    }

    if (this.createNewTask)
    {
      this.administration.plannedTime = selectedTimestamp;
      this.administration.plannedDose = therapyDose;

      view.getRestApi().createAdministrationTask(
          this.therapy,
          this.administration,
          !this.requestSupplyContainer.isHidden() ? this.requestSupplyCheckBox.isChecked() : false,
          true)
          .then(
              function onSuccess()
              {
                self.resultCallback(new app.views.common.AppResultData({success: true}));
              },
              function onFailure()
              {
                self.resultCallback(new app.views.common.AppResultData({success: false}));
              }
          );
    }
    else
    {
      this.administration.administrationTime = selectedTimestamp;
      this.administration.administeredDose = therapyDose;
      if (this.getTherapy().isOrderTypeOxygen())
      {
        if (this.administrationType === enums.administrationTypeEnum.ADJUST_INFUSION)
        {
          this.administration.adjustAdministrationSubtype = enums.adjustAdministrationSubtype.OXYGEN;
          this.administration.administrationResult = enums.administrationResultEnum.GIVEN;
        }
        else if (this.administrationType === enums.administrationTypeEnum.START)
        {
          this.administration.startAdministrationSubtype = enums.startAdministrationSubtype.OXYGEN;
          this.administration.startingDevice = this._oxygenRouteContainer.getStartingDevice();
        }
      }

      view.getRestApi().confirmAdministrationTask(
          this.therapy,
          this.administration,
          this.editMode,
          !this.requestSupplyContainer.isHidden() ? this.requestSupplyCheckBox.isChecked() : false,
          true)
          .then(
              function onSuccess()
              {
                self.resultCallback(new app.views.common.AppResultData({success: true}));
              },
              function onFailure()
              {
                self.resultCallback(new app.views.common.AppResultData({success: false}));
              }
          );
    }
  },

  /**
   * Check if administration is allowed and set warnings
   * @private
   */
  _assertAdministrationAllowed: function()
  {
    var self = this;

    var warnings = self._administrationWarningsProvider.getRestrictiveAdministrationWarnings(
        this._getSelectedTimestamp(),
        !this.createNewTask,
        !this.createNewTask,
        !this.createNewTask,
        true
    );

    this.warningContainer.setRestrictiveWarnings(warnings);
    this._setAdministrationWarnings(warnings);
    this.getDialog().getConfirmButton().setEnabled(!this.getAdministrationWarnings().hasRestrictiveWarnings());
  },

  /**
   * Perform checks that do not prevent administration, but open warning dialog
   */
  makePreConfirmChecks: function()
  {
    var view = this.getView();

    if (this._medicationBarcodeContainer && !this._medicationBarcodeContainer.isScannedCodeCorrect())
    {
      if (!this._medicationBarcodeContainer.isScannedCodeCorrect())
      {
        this._openConfirmationWarningDialog(
            view.getDictionary("therapy.administration.scanned.medication.different.warning"), 300, 150);
      }
      return;
    }
    if (this.therapy.getWhenNeeded())
    {
      if (this._plannedDoseTimeValidator.assertPrnTimeTooSoon(
              this._getSelectedTimestamp().getTime(),
              this.therapy.getDosingFrequency()))
      {
        this._openConfirmationWarningDialog(view.getDictionary("therapy.administration.prn.warning"), 300, 160);
        return;
      }
    }
    else if (this.therapy.isContinuousInfusion() || this.therapy.isOrderTypeOxygen())
    {
      if (this._plannedDoseTimeValidator.assertRateChangesTooClose(this._getSelectedTimestamp(), this.administration))
      {
        this._openConfirmationWarningDialog(view.getDictionary("therapy.administration.near.other.warning"), 300, 150);
        return;
      }
      if (view.isInfusionBagEnabled() && this._plannedDoseTimeValidator.assertInsufficientQuantityForBolus(
              this._currentBagQuantity,
              this.dosePane.getDose()))
      {
        var bagQuantity =
            this._currentBagQuantity > 0 ? this._currentBagQuantity + " mL" : " " + view.getDictionary("bag.empty");
        this._openConfirmationWarningDialog(
            (tm.jquery.Utils.formatMessage(view.getDictionary("not.enough.for.bolus"), bagQuantity)),
            300,
            160);
        return;
      }
    }
    this._confirmTherapyAdministration();
  },

  /**
   *
   * @param {String} message
   * @param {number | null} width
   * @param {number | null} height
   * @private
   */
  _openConfirmationWarningDialog: function(message, width, height)
  {
    var self = this;
    var utils = tm.views.medications.MedicationUtils;
    utils.openConfirmationWithWarningDialog(this.getView(),
        message,
        width,
        height).then(function(confirm)
        {
          if (confirm)
          {
            self._confirmTherapyAdministration();
          }
          else if (self.resultCallback)
          {
            var resultData = new app.views.common.AppResultData({success: false});
            self.resultCallback(resultData);
          }
        },
        function()
        {
          if (self.resultCallback)
          {
            var resultData = new app.views.common.AppResultData({success: false});
            self.resultCallback(resultData);
          }
        });
  },

  _assertAdministrationWarnings: function()
  {
    this._assertAdministrationAllowed();
    this._loadInfusionBagQuantity();
    this._handleMedicationIngredientRule(
        app.views.medications.TherapyEnums.medicationRuleEnum.PARACETAMOL_MAX_DAILY_DOSE);
  },

  _findFirstMedicationAndValidateData: function(data, firstMedicationId, setPrescribedMedication)
  {
    var firstMedicationData = null;
    if (!tm.jquery.Utils.isEmpty(data))
    {
      for (var i = 0; i < data.length; i++)
      {
        data[i] = !tm.jquery.Utils.isEmpty(data[i]) ?
            app.views.medications.common.dto.MedicationData.fromJson(data[i]) : null;
        if (!tm.jquery.Utils.isEmpty(data[i]) && data[i].medication.id == firstMedicationId)
        {
          firstMedicationData = data[i];
          if (setPrescribedMedication)
          {
            this.prescribedMedicationData = data[i];
          }
        }
      }
      this._medicationDataForAllIngredients = data;
      this._applyMedicationInfoButtonTooltip(data);
      if (!tm.jquery.Utils.isEmpty(firstMedicationData))
      {
        this._validateAndPresentData(firstMedicationData, false);
      }
      else
      {
        this._createAndPresentUniversalMedicationData();
      }
    }
  },

  _loadMedicationData: function (medicationId, preventEvent)
  {
    var self = this;
    if (medicationId)
    {
      this.medicationId = medicationId;
      this.getView().getRestApi().loadMedicationData(medicationId).then(function onDataLoad(medicationData)
      {
        self._applyMedicationInfoButtonTooltip(medicationData);
        self._validateAndPresentData(medicationData, true, preventEvent);
      });
    }
    else //uncoded medications (universal forms)
    {
      this._createAndPresentUniversalMedicationData();
    }
  },

  _applyMedicationInfoButtonTooltip: function(medicationData)
  {
    medicationData = tm.jquery.Utils.isArray(medicationData) ? medicationData : [medicationData];
    if (medicationData.some(hasUniversalMedication))
    {
      this._medicationInfoButton.setTooltip(this._createMedicationDetailsTooltip(medicationData));
      this.isRendered() ? this._medicationInfoButton.show() : this._medicationInfoButton.setHidden(false);
    }

    function hasUniversalMedication(medication)
    {
      return !medication.getMedication().isMedicationUniversal();
    }
  },

  _applyTitrationDataIconVisibility: function()
  {
    if (this.prescribedMedicationData &&
        !tm.jquery.Utils.isEmpty(this.prescribedMedicationData.getTitration()))
    {
      this.isRendered() ? this._titrationDataIcon.show() : this._titrationDataIcon.setHidden(false);
    }
  },

  _createAndPresentUniversalMedicationData: function()
  {
    var self = this;
    var medicationData = null;
    if (!tm.jquery.Utils.isEmpty(this.therapy))
    {
      if (this.therapy.isOrderTypeComplex())
      {
        medicationData = tm.views.medications.MedicationUtils.getMedicationDataFromComplexTherapy(this.therapy);
      }
      else
      {
        medicationData = tm.views.medications.MedicationUtils.getMedicationDataFromSimpleTherapy(this.therapy);
      }
    }

    self._validateAndPresentData(medicationData, false);
  },

  _handleMedicationIngredientRule: function(medicationIngredientRule, medicationData)
  {
    var self = this;
    var view = this.getView();
    var type = !tm.jquery.Utils.isEmpty(self.administrationType)
        ? self.administrationType
        : !tm.jquery.Utils.isEmpty(self.administration) ? self.administration.administrationType : null;

    var showRuleWarning = type === app.views.medications.TherapyEnums.administrationTypeEnum.START
        || type === app.views.medications.TherapyEnums.administrationTypeEnum.ADJUST_INFUSION
        || type == null;

    if (showRuleWarning)
    {
      this.getDialog().getConfirmButton().setEnabled(false);
      clearTimeout(self.ingredientRuleRequestTimeout);

      this.ingredientRuleRequestTimeout = setTimeout(function()
      {
        if (self.isRendered())
        {
          var paracetamolDailyDoseRule = app.views.medications.TherapyEnums.medicationRuleEnum.PARACETAMOL_MAX_DAILY_DOSE;

          var medicationWithIngredient = self.medicationRuleUtils.extractMedicationWithMedicationRule(
              self._medicationDataForAllIngredients,
              paracetamolDailyDoseRule);

          medicationData = !tm.jquery.Utils.isEmpty(medicationWithIngredient)
              ? medicationWithIngredient
              : tm.jquery.Utils.isEmpty(medicationData) ? self.getMedicationData() : medicationData;

          if (!tm.jquery.Utils.isEmpty(medicationData)
              && medicationIngredientRule === paracetamolDailyDoseRule
              && self.medicationRuleUtils.isMedicationRuleSet(medicationData, paracetamolDailyDoseRule))
          {
            self.warningContainer.showLoadingIcon(true);

            var therapyDose = self._buildTherapyDose();
            var therapyDto = self.therapy;

            var administrationId = self.administration && self.administration.administrationId
                ? self.administration.administrationId
                : null;

            var taskId = self.administration && self.administration.taskId
                ? self.administration.taskId
                : null;

            self.medicationRuleUtils.getParacetamolRuleForAdministration(
                medicationData,
                therapyDto,
                self.administrationDateField.getDate(),
                self.administrationTimeField.getTime(),
                view.getPatientId(),
                view,
                therapyDose,
                administrationId,
                taskId).then(
                function validationSuccessHandler(medicationRuleResult)
                {
                  if (self.isRendered())
                  {
                    self.warningContainer.showLoadingIcon(false);
                    var ruleWarning =
                        self._administrationWarningsProvider.getMedicationIngredientRuleHtml(medicationRuleResult);
                    self.warningContainer.handleIngredientWarning(ruleWarning);
                    self.getDialog().getConfirmButton().setEnabled(
                        self.getAdministrationWarnings() ?
                            !self.getAdministrationWarnings().hasRestrictiveWarnings() :
                            true);
                  }
                });
          }
          else
          {
            self.getDialog().getConfirmButton().setEnabled(
                self.getAdministrationWarnings() ?
                    !self.getAdministrationWarnings().hasRestrictiveWarnings() :
                    true);
          }
        }
      }, 150);
    }
  },

  _validateAndPresentData: function (medicationData, setMedicationField, preventMedicationFieldEvent)
  {
    var dataIsValid = this._validateMedicationData(medicationData);

    if (dataIsValid)
    {
      this._presentMedicationData(medicationData, setMedicationField, preventMedicationFieldEvent);
    }
    else
    {
      this._presentMedicationData(this.prescribedMedicationData, true);
    }
  },

  _validateMedicationData: function (medicationData)
  {
    if (medicationData == null || this.prescribedMedicationData == null)
    {
      return true;
    }
    return this._assertMedicationNumeratorUnitsMatch(medicationData, this.prescribedMedicationData);
  },

  _setRoutes: function(medicationDataRoutes, preselectedRoute)
  {
    var therapyRoutes = this.therapy.getRoutes();
    var filteredRoutes = medicationDataRoutes.filter(function(route)
    {
      return therapyRoutes.some(function(therapyRoute)
      {
        return therapyRoute.id === route.id;
      });
    });

    this._routesPane.setRoutes(filteredRoutes, preselectedRoute);
    if (filteredRoutes.length > 1)
    {
      this._routesContainer.show();
    }
    else
    {
      this._routesContainer.hide();
    }
  },

  _presentMedicationData: function(medicationData, setMedicationField, preventMedicationFieldEvent)
  {
    var utils = tm.views.medications.MedicationUtils;

    if (!tm.jquery.Utils.isEmpty(this.administration) && medicationData.getRoutes())
    {
      this._setRoutes(medicationData.getRoutes(), this.administration.route);
    }

    this._calculateWitnessNeeded(medicationData) ? this._showWitnessContainer() : this._hideWitnessContainer();

    var enums = app.views.medications.TherapyEnums;
    if (!tm.jquery.Utils.isEmpty(this.currentAdministration))
    {
      this.administration = this.currentAdministration;
    }
    var medicationChanged = this._hasMedicationChanged(this.prescribedMedicationData, medicationData);
    this.setMedicationData(medicationData);
    this.setMedicationField = setMedicationField;
    var therapyDoseTypeEnum = this.therapyDoseTypeEnum;

    if (this.administration)
    {
      if (this.administration.plannedDose && this.administration.plannedDose.therapyDoseTypeEnum)
      {
        therapyDoseTypeEnum = this.administration.plannedDose.therapyDoseTypeEnum;
      }
      else if (this.administration.administeredDose && this.administration.administeredDose.therapyDoseTypeEnum)
      {
        therapyDoseTypeEnum = this.administration.administeredDose.therapyDoseTypeEnum;
      }
      this.therapyDoseTypeEnum = therapyDoseTypeEnum;

      if (this.administration.infusionSetChangeEnum && tm.jquery.Utils.isEmpty(this.administration.taskId))
      {
        var buttons = this.infusionSetChangeButtonGroup.getButtons();
        for (var i = 0; i < buttons.length; i++)
        {
          if (buttons[i].data == this.administration.infusionSetChangeEnum)
          {
            this.infusionSetChangeButtonGroup.setSelection([buttons[i]]);
            break;
          }
        }
      }
    }

    if (!therapyDoseTypeEnum && this._isDoseTypeDoseRange())
    {
      therapyDoseTypeEnum = enums.therapyDoseTypeEnum.QUANTITY;
    }

    if (medicationData && setMedicationField && this.medicationField)
    {
      this.medicationField.setSelection(medicationData.medication, null, preventMedicationFieldEvent);
    }

    var administrationDose;
    if (this.administration)
    {
      administrationDose = this.editMode &&
      (this.administration.administrationResult == enums.administrationResultEnum.GIVEN ||
      this.administration.administrationResult == enums.administrationResultEnum.SELF_ADMINISTERED)
          ? this.administration.administeredDose : this.administration.plannedDose;
    }

    var complexTherapyWithSingleIngredient =
        this.therapy.isOrderTypeComplex() && this.therapy.getIngredientsList().length == 1;

    if (!therapyDoseTypeEnum || this.stopFlow)
    {
      this._hideAllDoseRateFields();
      if (this.therapy.isContinuousInfusion() && this.administrationType == enums.administrationTypeEnum.INFUSION_SET_CHANGE)
      {
        if (!(this.administration &&
            this.administration.infusionSetChangeEnum == enums.infusionSetChangeEnum.INFUSION_SYSTEM_CHANGE))
        {
          if (this._bagContainer)
          {
            this._bagContainer.isRendered() ? this._bagContainer.show() : this._bagContainer.setHidden(false);
          }
          if (this.administration && this.administration.infusionBag && this._bagField)
          {
            this._bagField.setValue(this.administration.infusionBag.quantity);
          }
        }
      }
    }
    else if (therapyDoseTypeEnum === enums.therapyDoseTypeEnum.QUANTITY)
    {
      if (!medicationData.isDoseFormDescriptive())
      {
        this.dosePane.setMedicationData(medicationData);
        if (this._isDoseTypeDoseRange())
        {
          this.dosePane.limitByDoseRange(this.getTherapy().getDoseElement().doseRange);
        }
        this.doseContainer.show();
        if (this.administration && !tm.jquery.Utils.isEmpty(administrationDose) && administrationDose.numerator)
        {
          var numeratorIsVolume =
              tm.jquery.Utils.isEmpty(administrationDose.denominator) &&
              utils.isUnitVolumeUnit(administrationDose.numeratorUnit);
          if (complexTherapyWithSingleIngredient && numeratorIsVolume)
          {
            this.dosePane.setVolume(administrationDose.numerator);
          }
          else
          {
            this.dosePane.setDoseNumerator(administrationDose.numerator, true);
            if (medicationChanged)
            {
              this.dosePane.calculateAndSetDoseDenominator(true);
              if (this.getView().getTherapyAuthority().isMedicationIdentifierScanningAllowed()
                  && this._medicationBarcodeContainer && this._medicationBarcodeContainer.getBarcode())
              {
                if (this.prescribedMedicationData.getDefiningIngredient().strengthNumerator !==
                    medicationData.getDefiningIngredient().strengthNumerator ||
                    this.prescribedMedicationData.getDefiningIngredient().strengthDenominator !==
                    medicationData.getDefiningIngredient().strengthDenominator)
                {
                  this._medicationBarcodeContainer.hideBarcodeStatusIcons();
                  this._medicationBarcodeContainer.showBarcodeDifferentMassImg();
                }
              }
            }
            else if (administrationDose.denominator)
            {
              this.dosePane.setDoseDenominator(administrationDose.denominator, true);
            }
          }
        }
        else
        {
          this._setDoseFromTherapy();
        }
      }
      if (this.administration && this.administration.doctorsComment)
      {
        this._doseCommentContainer.setHtml(this.administration.doctorsComment);
        this.isRendered() ? this._doseCommentContainer.show() : this._doseCommentContainer.setHidden(false);
      }
    }
    else if (therapyDoseTypeEnum === enums.therapyDoseTypeEnum.VOLUME_SUM)
    {
      this.dosePane.setMedicationData(medicationData);
      this.volumeContainer.show();
      if (this.administration && administrationDose.numerator)
      {
        this.volumeField.setValue(administrationDose.numerator);
      }
      else
      {
        this._setVolumeFromTherapy();
      }
      if (this.administration && this.administration.doctorsComment)
      {
        this._volumeCommentContainer.setHtml(this.administration.doctorsComment);
        this.isRendered() ? this._volumeCommentContainer.show() : this._volumeCommentContainer.setHidden(false);
      }
    }
    else if (therapyDoseTypeEnum === enums.therapyDoseTypeEnum.RATE)
    {
      if (this.getTherapy().isOrderTypeOxygen())
      {
        // device can be changed when starting, but not on rate change
        if (this.administrationType === enums.administrationTypeEnum.START)
        {
          this._showOxygenRouteRowContainer();
        }

        if (this.administration && administrationDose)
        {
          this.ratePane.setRate(administrationDose.numerator, true);
          this.ratePane.setRateUnit(administrationDose.numeratorUnit);
        }
        else
        {
          this.ratePane.setRate(this.getTherapy().getFlowRate(), true);
          this.ratePane.setRateUnit(this.getTherapy().getFlowRateUnit());
        }
        var startingDevice = this.administration && this.administration.startingDevice ?
            new app.views.medications.common.dto.OxygenStartingDevice(this.administration.startingDevice) :
            this.getTherapy().getStartingDevice();
        this._oxygenRouteContainer.setStartingDevice(startingDevice);


        this.ratePane.setFormulaVisible(true);
        this.ratePane.setDurationVisible(false);
      }
      else
      {
        this.ratePane.setFirstMedicationData(medicationData, true);
        this.ratePane.setDurationVisible(false);
        if (this.administration && administrationDose)
        {
          this.ratePane.setFormulaUnitToLabel(administrationDose.denominatorUnit, true);
          this.ratePane.setRate(administrationDose.numerator, true);

          if (medicationData.getMedication().isMedicationUniversal())
          {
            this.ratePane.setFormula(administrationDose.denominator, true);
          }
        }
        this.ratePane.refreshRate(true);
        this.ratePane.setFormulaVisible();
      }

      this.rateContainer.show();

      if (!this.administration)
      {
        this._setRateFromLastAdministrationWithRate();
      }
      if (this.administration &&
          this.administration.administrationType == enums.administrationTypeEnum.START &&
          this.therapy.isContinuousInfusion())
      {
        if (this._bagContainer)
        {
          this._bagContainer.show();
        }
        if (this.administration.infusionBag && this._bagField)
        {
          this._bagField.setValue(this.administration.infusionBag.quantity);
        }
      }
      if (this.administration && this.administration.doctorsComment)
      {
        this._rateCommentContainer.setHtml(this.administration.doctorsComment);
        this.isRendered() ? this._rateCommentContainer.show() : this._rateCommentContainer.setHidden(false);
      }
    }
    else if (therapyDoseTypeEnum === enums.therapyDoseTypeEnum.RATE_QUANTITY)
    {

      this.dosePane.setMedicationData(medicationData);
      if (tm.jquery.Utils.isEmpty(medicationData))
      {
        var onlyInfusionIngredient = this.therapy.getIngredientsList()[0];
        if (onlyInfusionIngredient.quantityUnit)
        {
          this.dosePane.setUnits(onlyInfusionIngredient.quantityUnit, onlyInfusionIngredient.quantityDenominatorUnit);
        }
        else
        {
          this.dosePane.setUnits(onlyInfusionIngredient.quantityDenominatorUnit, null);
        }
      }
      this.doseContainer.show();

      this.ratePane.setFirstMedicationData(medicationData);
      this.rateContainer.show();

      if (this.administration && administrationDose)
      {

        if (this.administration && administrationDose.secondaryNumerator)
        {
          var secondaryNumeratorIsVolume =
              tm.jquery.Utils.isEmpty(administrationDose.secondaryDenominator) &&
              utils.isUnitVolumeUnit(administrationDose.secondaryNumeratorUnit);
          if (complexTherapyWithSingleIngredient && secondaryNumeratorIsVolume)
          {
            this.dosePane.setVolume(administrationDose.secondaryNumerator);
          }
          else
          {
            this.dosePane.setDoseNumerator(administrationDose.secondaryNumerator, true);
            if (administrationDose.secondaryDenominator)
            {
              this.dosePane.setDoseDenominator(administrationDose.secondaryDenominator, true);
            }
          }
        }
        this.ratePane.setFormulaUnitToLabel(administrationDose.denominatorUnit);
        this.ratePane.setRate(administrationDose.numerator);
      }
      else
      {
        this._setDoseFromTherapy();
        this._setRateFromTherapy();
      }
      this.ratePane.setFormulaVisible();
      this.ratePane.setDurationVisible(!this.therapy.variable);
    }
    else if (therapyDoseTypeEnum === enums.therapyDoseTypeEnum.RATE_VOLUME_SUM)
    {
      this.ratePane.setFirstMedicationData(medicationData);
      this.rateContainer.show();
      this.ratePane.setDurationVisible(!this.therapy.variable);
      if (!this.therapy.variable)
      {
        this.volumeContainer.show();
      }
      if (this.administration && administrationDose)
      {
        if (!this.therapy.variable && administrationDose.secondaryNumerator)
        {
          this.volumeField.setValue(administrationDose.secondaryNumerator);
        }
        this.ratePane.setFormulaUnitToLabel(administrationDose.denominatorUnit);
        this.ratePane.setRate(administrationDose.numerator);
      }
      else
      {
        this._setVolumeFromTherapy();
        this._setRateFromTherapy();
      }
      if (this.administration &&
          this.administration.administrationType == enums.administrationTypeEnum.START &&
          this.therapy.isContinuousInfusion())
      {
        if (this._bagContainer)
        {
          this._bagContainer.show();
        }
        if (this.administration.infusionBag && this._bagField)
        {
          this._bagField.setValue(this.administration.infusionBag.quantity);
        }
      }
    }

    if (!this.doseContainer.isHidden())
    {
      if (this.dosePane.numeratorField.isHidden() || this.dosePane.denominatorField.isHidden())
      {
        this.doseLabel.setAlignSelf("center");
      }
      else
      {
        this.doseLabel.setAlignSelf("flex-start");
      }
    }

    this.currentAdministration = this.administration;
    if (this.administration)
    {
      if ((this.administrationResultEnum == enums.administrationResultEnum.DEFER ||
          this.administrationResultEnum == enums.administrationResultEnum.NOT_GIVEN))
      {
        this._hideAllDoseRateFields();
        this._hideWitnessContainer();
      }
    }

    if (this.isRendered())
    {
      this._applyAdministrationAmountFieldFocus(preventMedicationFieldEvent);
    }
  },

  _applyAdministrationAmountFieldFocus: function(preventMedicationFieldEvent)
  {
    var self = this;
    setTimeout(function()
    {
      if (self.getView().getTherapyAuthority().isMedicationIdentifierScanningAllowed() &&
          self._medicationBarcodeContainer &&
          !preventMedicationFieldEvent &&
          !self.barcode)
      {
        self._medicationBarcodeContainer.requestFocusToBarcodeField();
      }
      else if (!self.doseContainer.isHidden())
      {
        self.dosePane.requestFocusToNumerator();
      }
      else if (!self.rateContainer.isHidden())
      {
        self.ratePane.requestFocus();
      }
      else if (!self.volumeContainer.isHidden())
      {
        self.volumeField.focus();
      }
    }, 0);
  },

  _setDoseFromTherapy: function()
  {
    var doseNumerator = null;
    var doseDenominator = null;

    if (!tm.jquery.Utils.isEmpty(this.therapy.doseElement) && !tm.jquery.Utils.isEmpty(this.therapy.doseElement.quantity))
    {
      doseNumerator = this.therapy.doseElement.quantity;
      if (!tm.jquery.Utils.isEmpty(this.therapy.doseElement.quantityDenominator))
      {
        doseDenominator = this.therapy.doseElement.quantityDenominator;
      }
    }
    else if (!tm.jquery.Utils.isEmpty(this.therapy.getIngredientsList()) &&
        !tm.jquery.Utils.isEmpty(this.therapy.getIngredientsList()[0].quantity))
    {
      doseNumerator = this.therapy.getIngredientsList()[0].quantity;
      if (!tm.jquery.Utils.isEmpty(this.therapy.getIngredientsList()[0].quantityDenominator))
      {
        doseDenominator = this.therapy.getIngredientsList()[0].quantityDenominator;
      }
    }
    if (!tm.jquery.Utils.isEmpty(doseNumerator))
    {
      this.dosePane.setDoseNumerator(doseNumerator, true);
    }
    if (!tm.jquery.Utils.isEmpty(doseDenominator))
    {
      this.dosePane.setDoseDenominator(doseDenominator, true);
    }
  },

  _setVolumeFromTherapy: function()
  {
    if (!tm.jquery.Utils.isEmpty(this.therapy.volumeSum))
    {
      this.volumeField.setValue(this.therapy.volumeSum);
    }
  },

  _setRateFromTherapy: function()
  {
    if (!tm.jquery.Utils.isEmpty(this.therapy.doseElement))
    {
      if (!tm.jquery.Utils.isEmpty(this.therapy.doseElement.rate))
      {
        this.ratePane.setRate(this.therapy.doseElement.rate);
      }
      if (!tm.jquery.Utils.isEmpty(this.therapy.doseElement.rateFormulaUnit))
      {
        this.ratePane.setFormulaUnitToLabel(this.therapy.doseElement.rateFormulaUnit);
      }
    }
  },

  _setRateFromLastAdministrationWithRate: function()
  {
    var enums = app.views.medications.TherapyEnums;
    var rateIsSet = false;
    if (this.administrations)
    {
      var lastAdministrationWithRate = null;
      this.administrations.forEach(function(administration)
      {
        if (((administration.administrationType == enums.administrationTypeEnum.START ||
            administration.administrationType == enums.administrationTypeEnum.ADJUST_INFUSION) &&
            administration.administrationStatus == enums.administrationStatusEnum.COMPLETED ||
            administration.administrationStatus == enums.administrationStatusEnum.COMPLETED_EARLY ||
            administration.administrationStatus == enums.administrationStatusEnum.COMPLETED_LATE) &&
            (!tm.jquery.Utils.isEmpty(administration.administeredDose) &&
            administration.administeredDose.numerator !== 0))
        {
          if (lastAdministrationWithRate == null || administration.administrationTime > lastAdministrationWithRate.administrationTime)
          {
            lastAdministrationWithRate = administration;
          }
        }
      });
      if (!tm.jquery.Utils.isEmpty(lastAdministrationWithRate))
      {
        if (!tm.jquery.Utils.isEmpty(lastAdministrationWithRate.administeredDose.numerator))
        {
          rateIsSet = true;
          this.ratePane.setRate(lastAdministrationWithRate.administeredDose.numerator);
        }
        if (!tm.jquery.Utils.isEmpty(lastAdministrationWithRate.administeredDose.denominatorUnit))
        {
          this.ratePane.setFormulaUnitToLabel(lastAdministrationWithRate.administeredDose.denominatorUnit);
        }
      }
    }
    if (!rateIsSet && this.lastPositiveInfusionRate)
    {
      this.ratePane.setRate(this.lastPositiveInfusionRate);
      this.ratePane.setFormulaUnitToLabel(this._getDoseElementFromTherapy().rateFormulaUnit);
    }
  },

  /**
   * Asserts if medicationData has changed by comparing medication id-s
   * @param {Array<app.views.medications.common.dto.MedicationData>|app.views.medications.common.dto.MedicationData} previousMedicationData
   * @param {app.views.medications.common.dto.MedicationData} newMedicationData
   * @returns {boolean}
   * @private
   */
  _hasMedicationChanged: function(previousMedicationData, newMedicationData)
  {
    if (!tm.jquery.Utils.isEmpty(this.medicationField) && !tm.jquery.Utils.isArray(previousMedicationData))
    {
      return previousMedicationData && newMedicationData &&
          previousMedicationData.getMedication().getId() !== newMedicationData.getMedication().getId();
    }
    return false;
  },

  _calculatePatientAgeInYears: function()
  {
    var patientData = this.getView().getPatientData();
    if (!tm.jquery.Utils.isEmpty(patientData) && !tm.jquery.Utils.isEmpty(patientData.birthDate))
    {
      return moment(CurrentTime.get()).diff(new Date(patientData.birthDate), 'years');
    }
    return null;
  },

  _calculateWitnessNeeded: function(medicationData)
  {
    var view = this.getView();

    if (view.getMedicationsWitnessRequired() === true)
    {
      var controlledDrug = (medicationData && !tm.jquery.Utils.isEmpty(medicationData.controlledDrug)) ? medicationData.controlledDrug : false;
      var patientAge = this._calculatePatientAgeInYears();
      var patientUnderAge = false;
      if (!tm.jquery.Utils.isEmpty(patientAge) && view.getMedicationsWitnessRequiredUnderAge() === true)
      {
        patientUnderAge = patientAge <= 16;
      }
      this.witnessNeeded = patientUnderAge || controlledDrug;
      return this.witnessNeeded;
    }
    else
    {
      return false;
    }
  },

  _showWitnessContainer: function()
  {
    if (!tm.jquery.Utils.isEmpty(this.getDialog()) && this.witnessContainer.isHidden() && this.witnessNeeded)
    {
      this.dialog.setHeight(this.dialog.getHeight() + 48);
    }
    this.witnessContainer.show();
  },

  _hideAllDoseRateFields: function()
  {
    this.doseContainer.hide();
    this.rateContainer.hide();
    this.volumeContainer.hide();
    if (this._bagContainer)
    {
      this._bagContainer.hide();
    }
    if (!tm.jquery.Utils.isEmpty(this.medicationContainer))
    {
      this.medicationContainer.hide();
    }

  },

  _hideOxygenRouteRowContainer: function()
  {
    this._oxygenRouteRowContainer.hide();
  },

  _showOxygenRouteRowContainer: function()
  {
    this._oxygenRouteRowContainer.show();
  },

  _hideWitnessContainer: function()
  {
    if (!tm.jquery.Utils.isEmpty(this.getDialog()) && !this.witnessContainer.isHidden() && this.witnessNeeded)
    {
      this.dialog.setHeight(this.dialog.getHeight() - 48);
    }
    this.witnessContainer.hide();
  },

  _assertMedicationNumeratorUnitsMatch: function (medicationData)
  {
    var view = this.getView();
    var numeratorUnit = medicationData.getStrengthNumeratorUnit();
    var prescribedNumeratorUnit = this.prescribedMedicationData.getStrengthNumeratorUnit();
    var unitsMatch = numeratorUnit == prescribedNumeratorUnit;
    if (unitsMatch)
    {
      return true;
    }
    else
    {
      var message = view.getDictionary('units.dont.match') + ': ' + prescribedNumeratorUnit + ', ' + numeratorUnit;

      view.getAppFactory().createWarningSystemDialog(message, 320, 120).show();
      return false;
    }
  },

  _setupValidation: function()
  {
    var self = this;
    var view = this.getView();

    if (this.therapy.getRoutes().length > 1 && this.administrationResultMenu.getActiveIndex() == 0) // active index 0 -> given
    {
      this._addValidations(this._routesPane.getRoutesPaneValidations());
    }
    if (this.medicationField)
    {
      this.validationForm.addFormField(new tm.jquery.FormField({
        component: self.medicationField,
        required: true,
        componentValueImplementationFn: function()
        {
          return self.medicationField.getSelection();
        }
      }));
    }
    if (!this.doseContainer.isHidden())
    {
      this._addValidations(this.dosePane.getDosePaneValidations());
    }
    if (!this.rateContainer.isHidden())
    {
      this._addValidations(this.ratePane.getInfusionRatePaneValidations());
    }
    if (!this.volumeContainer.isHidden())
    {
      this.validationForm.addFormField(new tm.jquery.FormField({
        component: self.volumeField,
        required: true,
        componentValueImplementationFn: function()
        {
          var value = self.volumeField.getValue();
          if (value == null || value <= 0)
          {
            return null;
          }
          return true;
        }
      }));
    }
    if (this.administrationResultMenu.getActiveIndex() == 1)
    {
      this.validationForm.addFormField(new tm.jquery.FormField({
        component: self.administrationResultMenu,
        required: true,
        componentValueImplementationFn: function()
        {
          var value = self.deferButtonGroup.getSelection();
          if (value == null || value.length <= 0)
          {
            return null;
          }

          return true;
        }
      }));
    }
    else if (this.administrationResultMenu.getActiveIndex() == 2)
    {
      this.validationForm.addFormField(new tm.jquery.FormField({
        component: self.administrationResultMenu,
        required: true,
        componentValueImplementationFn: function()
        {
          var value = self.selfAdminButtonGroup.getSelection();
          if (value == null || value.length <= 0)
          {
            return null;
          }
          return true;
        }
      }));
    }
    else if (this.administrationResultMenu.getActiveIndex() == 3)
    {
      this.validationForm.addFormField(new tm.jquery.FormField({
        component: self.administrationResultMenu,
        required: true,
        componentValueImplementationFn: function()
        {
          var value = self.notGivenButtonGroup.getSelection();
          if (value == null || value.length <= 0)
          {
            return null;
          }
          return true;
        }
      }));
    }
    if ((this.deferButtonGroup.getSelection().length > 0 && this.administrationResultMenu.getActiveIndex() == 1 &&
        this.deferButtonGroup.getSelection()[0].id == "clinical-reason") ||
        (this.notGivenButtonGroup.getSelection().length > 0 && this.administrationResultMenu.getActiveIndex() == 3 &&
        this.notGivenButtonGroup.getSelection()[0].id == "clinical-reason"))
    {
      this.validationForm.addFormField(new tm.jquery.FormField({
        component: self.commentField,
        required: true,
        componentValueImplementationFn: function()
        {
          var value = self.commentField.getValue();
          if (value == null || value.length <= 0)
          {
            return null;
          }
          return true;
        }
      }));
    }
    if (!this._oxygenRouteRowContainer.isHidden())
    {
      this.validationForm.addFormField(new tm.jquery.FormField({
        component: self._oxygenRouteContainer,
        required: true,
        componentValueImplementationFn: function(component)
        {
          return component.getStartingDevice();
        }
      }));
    }

    if (this.getTherapy().isOrderTypeOxygen())
    {
      var oxygenFlowValidator = new app.views.medications.ordering.oxygen.OxygenFlowRateValidator({
         view: view
      });
      this._addValidations(oxygenFlowValidator.getAsFormFieldValidators(this.ratePane.getRateField()))
    }

    if (!this.witnessContainer.isHidden())
    {
      this.validationForm.addFormField(new tm.jquery.FormField({
        component: self.witnessContainer,
        required: false,
        componentValueImplementationFn: function()
        {
          return self.witnessPane.getAuthenticatedWitness();
        },
        validation: {
          type: "local",
          validators: [
            new tm.jquery.Validator({
              errorMessage: view.getDictionary("authenticate.witness"),
              isValid: function(value)
              {
                return !tm.jquery.Utils.isEmpty(value);
              }
            })
          ]
        }
      }));
    }
  },


  _addValidations: function (validation)
  {
    for (var i = 0; i < validation.length; i++)
    {
      this.validationForm.addFormField(validation[i]);
    }
  },

  _getSelectedTimestamp: function()
  {
    var administrationDate = this.administrationDateField.getDate();
    var administrationTime = this.administrationTimeField.getTime();
    return new Date(
        administrationDate.getFullYear(),
        administrationDate.getMonth(),
        administrationDate.getDate(),
        administrationTime.getHours(),
        administrationTime.getMinutes(),
        0, 0);
  },

  _abortRenderConditionTask: function()
  {
    if (!tm.jquery.Utils.isEmpty(this._renderConditionTask))
    {
      this._renderConditionTask.abort();
      this._renderConditionTask = null;
    }
  },

  _loadInfusionBagQuantity: function()
  {
    var self = this;
    var view = this.getView();
    var enums = app.views.medications.TherapyEnums;

    if (this.therapy.isContinuousInfusion() && this.administrationType === enums.administrationTypeEnum.BOLUS)
    {
      this.getDialog().getConfirmButton().setEnabled(false);
      this.warningContainer.showLoadingIcon(true);
      var selectedTimestamp = this._getSelectedTimestamp();

      var params = {
        patientId: view.getPatientId(),
        when: JSON.stringify(selectedTimestamp),
        therapyId: this.therapy.getTherapyId()
      };
      var url = view.getViewModuleUrl() + tm.views.medications.TherapyView.SERVLET_PATH_GET_REMAINING_INFUSION_BAG_QUANTITY;
      view.loadViewData(url, params, null, function(data)
      {
        if (self.isRendered())
        {
          self._currentBagQuantity = data;
          self.warningContainer.showLoadingIcon(false);
          self.getDialog().getConfirmButton().setEnabled(
              self.getAdministrationWarnings() ?
                  !self.getAdministrationWarnings().hasRestrictiveWarnings() :
                  true);

        }
      });
    }
  },

  _setAdministrationWarnings: function(warnings)
  {
    this._administrationWarnings = warnings;
  },

  /**
   * @returns {Boolean}
   * @private
   */
  _isDoseTypeDoseRange: function()
  {
    return this.getTherapy() && this.getTherapy().getDoseElement() && this.getTherapy().getDoseElement().doseRange;
  },

  /**
   * @returns {Object|null}
   * @private
   */
  _getDoseElementFromTherapy: function()
  {
    return !tm.jquery.Utils.isEmpty(this.getTherapy().getDoseElement()) ? this.getTherapy().getDoseElement() :
        this.getTherapy().getTimedDoseElements()[0].doseElement;
  },

  /** public methods */
  getInfusionIngredient: function()
  {
    var dose = this.dosePane.getDose();
    if (this.getMedicationData())
    {
      return {
        medication: this.getMedicationData().getMedication(),
        quantity: dose.quantity,
        quantityUnit: this.getMedicationData().getStrengthNumeratorUnit(),
        quantityDenominator: dose.quantityDenominator,
        quantityDenominatorUnit: 'ml',
        doseForm: this.getMedicationData().getDoseForm()
      }
    }
    return null;
  },

  processResultData: function (resultDataCallback)
  {
    this.resultCallback = resultDataCallback;
    this._setupValidation();
    this.validationForm.submit();
  },

  getDialog: function()
  {
    return this.dialog;
  },

  setDialog: function(dialog)
  {
    this.dialog = dialog;
  },

  getResetButton: function()
  {
    return this.resetButton;
  },

  getAdministrationWarnings: function()
  {
    return this._administrationWarnings;
  },

  /**
   * @returns {app.views.medications.common.dto.Therapy}
   */
  getTherapy: function()
  {
    return this.therapy;
  },

  /**
   * @returns {app.views.common.AppView}
   */
  getView: function()
  {
    return this.view;
  },

  /**
   * Returns the latest therapy version for this administration task, if set. Used to load titration data correctly.
   * @returns {app.views.medications.common.dto.Therapy|null}
   */
  getLatestTherapyVersion: function()
  {
    return this.latestTherapyVersion;
  },

  /**
   * @returns {Array<app.views.medications.common.dto.MedicationData>|app.views.medications.common.dto.MedicationData}
   */
  getMedicationData: function()
  {
    return this.medicationData;
  },

  /**
   * @param {Array<app.views.medications.common.dto.MedicationData>|app.views.medications.common.dto.MedicationData} value
   */
  setMedicationData: function(value)
  {
    this.medicationData = value;
  },

  /**
   * @param actionCallback
   */
  onActionCallback: function(actionCallback)
  {
    if (this.isRendered())
    {
      if (actionCallback.action === tm.views.medications.TherapyView.VIEW_ACTION_AUTHENTICATE_ADMINISTRATION_WITNESS)
      {
        if (actionCallback.successful)
        {
          this.witnessPane.setAuthenticatedWitness(actionCallback.actionData);
        }
        else
        {
          this.witnessPane.setAuthenticatedWitness(null);
        }
      }
    }
  },

  /**
   * @Override
   */
  destroy: function()
  {
    this.callSuper();
    this._abortRenderConditionTask();
  }
});